// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel GeneratePoints
#include "noiseSimplex.cginc"

RWStructuredBuffer<float4> points;
RWBuffer<float> feedbackSampleNum;

vector centrePosition = vector(0,0,0,0);
uint sampleNum;
int chunkSize = 16; //16 is default.
int noiseHeight = 0;

int IndexFromCoord(int x, int y, int z)
{
    return x + sampleNum * (y + sampleNum * z);
}


[numthreads(8,8,1)]
void GeneratePoints (uint3 id : SV_DispatchThreadID)
{
    //feedbackSampleNum[0] = sampleNum;
    if (id.x >= sampleNum || id.y >= sampleNum || id.z >= sampleNum) {
        return;
    }

    float distanceFactor = (float)chunkSize/(float)sampleNum;
    float3 position = float3(id.x*distanceFactor, id.y*distanceFactor, id.z*distanceFactor);

    float w = 0.0;
    if(snoise(float2(position.x, position.z) + noiseHeight < position.y)) w = 1.0;
    
    
    points[IndexFromCoord(id.x, id.y, id.z)] = float4(position, w);
}
